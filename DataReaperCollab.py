# -*- coding: utf-8 -*-
"""DataReaperCollab.ipynb

Automatically generated by Colaboratory.

"""

#!/usr/bin/python3

import socket
import requests
import os
!pip install shodan
import shodan
import sys
import argparse
from time import sleep
!pip install colorama
from colorama import Fore, Back, Style
from requests.exceptions import ConnectionError, Timeout, RequestException
from urllib3.exceptions import ConnectionError
from datetime import datetime

### Set your Options Here ###
targ = False
query = True
scan = True
port = False
target = False
help = False
ig_hist = True

key = False
web_server = True
###     ###     ###

def banner():
    print(
            Fore.RED+
        """
               ...                            
             ;::::;                           
           ;::::; :;                          
         ;:::::'   :;                         
        ;:::::;     ;.                        
       ,:::::'       ;           OOO\         
       ::::::;       ;          OOOOO\        
       ;:::::;       ;         OOOOOOOO       
      ,;::::::;     ;'         / OOOOOOO      
    ;:::::::::`. ,,,;.        /  / DOOOOOO    
  .';:::::::::::::::::;,     /  /     DOOOO   
 ,::::::;::::::;;;;::::;,   /  /        DOOO  
;`::::::`'::::::;;;::::: ,#/  /          DOOO 
:`:::::::`;::::::;;::: ;::#  /            DOOO
::`:::::::`;:::::::: ;::::# /              DOO
`:`:::::::`;:::::: ;::::::#/               DOO
 :::`:::::::`;; ;:::::::::##                OO
 ::::`:::::::`;::::::::;:::#                OO
 `:::::`::::::::::::;'`:;::#                O 
  `:::::`::::::::;' /  / `:#                  
   ::::::`:::::;'  /  /   `#              v.2.1.0
                                  Made by Aznable,
                                          ice-wzl
    """+Fore.RESET
    )

api = shodan.Shodan("YOUR_API_KEY_HERE")
print(f"API key used: f{api}")

def do_query(api, query):
    results = []
    try:
        query = "".join(query)
        print("Query {}".format(query))
        result = api.search(query)
        for service in result["matches"]:
          results.append(service["ip_str"])
    except shodan.exception.APIError as e:
        print("Invalid Shodan API Key...")
        sys.exit(2)
    return results

def key_words(content,ip_addr):
    interesting_words = [
        ".aws/",
        ".bash_history",
        ".git/",
        ".python_history",
        ".ssh/",
        ".viminfo",
        ".wg-easy/",
        ".wget-hsts",
        "/etc",
        "/opt",
        "0day",
        "brute",
        "brute_ratel",
        "bruteforce",
        "cobalt",
        "cobalt-strike",
        "cobalt_strike",
        "collect",
        "crypter",
        "exploit",
        "gost",
        "hacking",
        "havoc",
        "home/",
        "id_rsa",
        "lockbit",
        "log4j",
        "malware",
        "metasploit",
        ".msf4",
        ".msf6",
        "mrlapis",
        "nessus",
        "nmap",
        "nucleigorailgun",
        "passwd",
        "payload",
        "pt/",
        "qakbot",
        "qbot",
        "ransom",
        "ransomware",
        "ratel",
        "redlinestealer",
        "revil",
        "root/",
        "shadow",
        "shellcode",
        "sliver",
        "sqlmap",
        "tools/",
        "victim",
        "wg/",
        "wireguard",
        "wormhole",
        "key.pem",
        "crt.pem",
        "key.key",
        "crt.key",
        "cert.crt",
        "password"
    ]

    word_found = False
    content = content.decode().lower()
    for i in interesting_words:
        if i in content:
            word_found = True
            print(Fore.GREEN + "\t{} found at {}".format(i, ip_addr.strip()))
    return word_found


def do_request(ig_hist,port,targ):
    # Setup session
    s = requests.Session()
    pre = requests.get("http://icanhazip.com")
    print(f"Current External IP: {pre.content.decode()}",end="")


    for target in results:
        try:
            if(target.strip()+"\n"):
                r = s.get(f"http://{target.strip()}:{port}/",timeout=10)
                print(Fore.RESET+f"http://{target.strip()}:{port}/ --> Status Code: {r.status_code}")
                key = key_words(r.content,target.strip())
                if((key) or (targ)):
                    print(f"{target.strip()} contains:")
                    for line in r.content.decode().split("\n"):
                        if("<a href=\"" in line):
                            file = line.split("href=\"")[1].split("\"")[0]
                            print("\t"+file)
                    print(Fore.RESET+"\n(X for yes and automatically gather subdirectories)")
                    harvester = input(Fore.RESET+"Would you like to reap (Y/n/X)> ")
                    if(harvester.upper() == 'Y' or harvester.upper() == 'X'):
                        if(harvester.upper()=='Y'):
                            harvest(s,target.strip(),r.content.decode(),"/",False,port)
                        else:
                            harvest(s,target.strip(),r.content.decode(),"/",True,port)

        except (ConnectionError, Timeout, RequestException):
            print(Fore.RED + f"{target.strip()}, is not responsive")


def harvest(s,ip,content,working_file,X,port):
    if(X == False and working_file != "/"):
        print(f"\nDir: {working_file} contains:")
        for line in content.split("\n"):
            if("<a href=\"" in line):
                file = line.split("href=\"")[1].split("\"")[0]
                print("\t"+file)

        harvest_dir = input(Fore.RESET+"\nWould you like to reap (Y/n/cancel)> ")
        if(harvest_dir.upper() != "Y"):
            return
        if(harvest_dir.upper() == "CANCEL"):
            working_file = "/"+working_file.split("/")[1]

    if not os.path.exists(ip+working_file):
        os.makedirs(ip+working_file)
    for line in content.split("\n"):
        if("<a href=\"" in line):
            file = line.split("href=\"")[1].split("\"")[0]
            if("/" in file):
                print("Crawling: "+working_file+file)
                rep = s.get(f"http://{ip}:{port}{working_file}{file}")
                harvest(s,ip,rep.content.decode(),working_file+file,X,port)
                if not os.path.exists(ip+working_file+file):
                    os.makedirs(ip+working_file+file)
            else:
                lf = False
                hd = s.head(f"http://{ip}:{port}{working_file}{file}")
                hdr = hd.headers
                if(int(hdr['Content-Length'])>5000000):
                    lf = True
                    print(Fore.RED+f"Warning: {file} is large ({hdr['Content-Length']} Bytes)")
                    dl = input(Fore.RESET+"Proceed with download? (Y/n)> ")
                if(lf and dl.upper() == "N"):
                    print(f"Aborting download on {file}")
                else:
                    print(f"Getting: {file} Size: {hdr['Content-Length']}")
                    rep = s.get(f"http://{ip}:{port}{working_file}{file}",stream=True, timeout=30)
                    w_file = open(f"{ip}{working_file}{file}",'wb')
                    w_file.write(rep.content)
                    w_file.close()



if __name__ == '__main__':
    # print the banner
    banner()


    # conduct the shodan query to get the results
    if help:
        print("""

        """)
        sys.exit(1)
    if(key):
        if(query):
            if(port != False and isinstance(port, int)):
                results = do_query(api, f'http.title:"Index of /" http.html:"key.pem", port:{port}')
            else:
                results = do_query(api, 'http.title:"Index of /" http.html:"key.pem", port:80')
        sleep(1.0)

        if(target != False and isinstance(target, str)):
            if(port != False and isinstance(port, int)):
                do_request(True, port, target)
            else:
                do_request(True,"80", target)

        if(scan):
            if(port != False and isinstance(port, int)):
                do_request(ig_hist, port, False)
            else:
                do_request(ig_hist,"80",False)

    elif(web_server):
        if(query):
            if(port != False and isinstance(port, int)):
                results = do_query(api, f'Title:"Directory listing for /" port:{port}')
            else:
                results = do_query(api, 'Title:"Directory listing for /" port:8000')
            sleep(1.0)
        # perform the requests which will loop through the results in results.txt
        if(target):
            if(port != False and isinstance(port, int)):
                do_request(True, port, target)
            else:
                do_request(True, "8000", target)

        if(scan):
            if(port != False and isinstance(port, int)):
                do_request(ig_hist, port, False)
            else:
                do_request(ig_hist,"8000",False)
